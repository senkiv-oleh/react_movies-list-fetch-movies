{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/api.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","addMovie","useState","value","setValue","results","setResults","filmFound","setFilmFound","htmlFor","type","id","placeholder","classNames","onChange","event","target","onClick","fetch","then","res","json","Response","Promise","reject","Title","Plot","Poster","ImdbUrl","imdbID","resolve","catch","App","state","data","find","item","setState","prevState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.317688d4.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [value, setValue] = useState('');\n  const [results, setResults] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n  const [filmFound, setFilmFound] = useState(false);\n\n  const handleChange = (event) => {\n    setFilmFound(false);\n    setValue(event.target.value);\n  };\n\n  const findMovie = () => {\n    getMovie(value)\n      .then((movies) => {\n        if (movies.Response === 'False') {\n          return Promise.reject(setResults({\n            title: '',\n            description: '',\n            imgUrl: '',\n            imdbUrl: '',\n            imdbId: '',\n          }));\n        }\n\n        setResults({\n          title: movies.Title,\n          description: movies.Plot,\n          imgUrl: movies.Poster,\n          imdbUrl: movies.ImdbUrl,\n          imdbId: movies.imdbID,\n        });\n        setValue('');\n\n        return Promise.resolve(setFilmFound(false));\n      })\n      .catch(() => setFilmFound(true));\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames(`input`, { 'is-danger': filmFound })}\n              value={value}\n              onChange={handleChange}\n            />\n          </div>\n\n          <p className=\"help is-danger\">\n            { filmFound && `Can't find a movie with such a title`}\n          </p>\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => {\n                addMovie(results);\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {results.imdbId ? (<MovieCard {...results} />) : 'Film not found'}\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","export function getMovie(title) {\n  const API_URL = `https://www.omdbapi.com/?apikey=1e23943c&t=`;\n\n  return fetch(`${API_URL}&t=${title}`)\n    .then(res => res.json());\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: data,\n  };\n\n  addMovie = (movie) => {\n    const { movies } = this.state;\n    const sameFilm = movies.find(item => item.imdbId === movie.imdbId);\n\n    if (!sameFilm && movie.imdbId) {\n      this.setState(prevState => ({\n        movies: [\n          ...prevState.movies,\n          movie,\n        ],\n      }));\n    }\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <FindMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}